Grammar

    0 $accept: program $end

    1 program: KPROGRAM KIDENT ';' declarations sub_declarations comp_stmt

    2 declarations: declarations KVAR ident_list ':' type ';'
    3             | /* empty */

    4 ident_list: KIDENT
    5           | ident_list ',' KIDENT

    6 type: std_type
    7     | KARRAY '[' KINTNUM '..' KINTNUM ']' KOF std_type

    8 std_type: KINT
    9         | KREAL
   10         | KBOOL

   11 sub_declarations: sub_declarations sub_dec ';'
   12                 | /* empty */

   13 @1: /* empty */

   14 sub_dec: @1 sub_head local_dec comp_stmt

   15 sub_head: KFUNC KIDENT args ':' std_type ';'
   16         | KPROC KIDENT args ';'

   17 args: '(' param_list ')'
   18     | /* empty */

   19 param_list: ident_list ':' type
   20           | param_list ';' ident_list ':' type

   21 local_dec: local_dec KVAR ident_list ':' type ';'
   22          | /* empty */

   23 comp_stmt: KBEGIN optional_stmts KEND

   24 optional_stmts: stmt_list
   25               | /* empty */

   26 stmt_list: stmt
   27          | stmt_list ';' stmt

   28 stmt: variable KASSIGN exp
   29     | proc_stmt
   30     | comp_stmt
   31     | KIF exp KTHEN stmt
   32     | KIF exp KTHEN stmt KELSE stmt
   33     | KWHILE exp KDO stmt

   34 variable: KIDENT
   35         | KIDENT '[' exp ']'

   36 proc_stmt: KIDENT
   37          | KIDENT '(' exp_list ')'

   38 exp_list: exp
   39         | exp_list ',' exp

   40 exp: KIDENT
   41    | KINTNUM
   42    | KREALNUM
   43    | KTRUE
   44    | KFALSE
   45    | KIDENT '(' exp_list ')'
   46    | '(' exp ')'
   47    | exp binOp exp
   48    | KNOT exp

   49 binOp: KADD
   50      | KSUB
   51      | KMULT
   52      | KDIVIDE
   53      | KMOD
   54      | KGT
   55      | KGE
   56      | KLT
   57      | KLE
   58      | KET
   59      | KNE
   60      | KAND
   61      | KOR


Terminals, with rules where they appear

$end (0) 0
'(' (40) 17 37 45 46
')' (41) 17 37 45 46
',' (44) 5 39
'..' (46) 7
':' (58) 2 15 19 20 21
';' (59) 1 2 11 15 16 20 21 27
'[' (91) 7 35
']' (93) 7 35
error (256)
KINT (258) 8
KREAL (259) 9
KBOOL (260) 10
KFUNC (261) 15
KPROC (262) 16
KWHILE (263) 33
KARRAY (264) 7
KIDENT (265) 1 4 5 15 16 34 35 36 37 40 45
KINTNUM (266) 7 41
KREALNUM (267) 42
KTRUE (268) 43
KFALSE (269) 44
KPROGRAM (270) 1
KVAR (271) 2 21
KDO (272) 33
KBEGIN (273) 23
KEND (274) 23
KIF (275) 31 32
KTHEN (276) 31 32
KELSE (277) 32
KOF (278) 7
KMOD (279) 53
KNOT (280) 48
KOR (281) 61
KAND (282) 60
KASSIGN (283) 28
KGT (284) 54
KLT (285) 56
KGE (286) 55
KLE (287) 57
KET (288) 58
KNE (289) 59
KMULT (290) 51
KADD (291) 49
KSUB (292) 50
KDIVIDE (293) 52
IF_PREC (294)
BINOP (295)


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1, on right: 0
declarations (51)
    on left: 2 3, on right: 1 2
ident_list (52)
    on left: 4 5, on right: 2 5 19 20 21
type (53)
    on left: 6 7, on right: 2 19 20 21
std_type (54)
    on left: 8 9 10, on right: 6 7 15
sub_declarations (55)
    on left: 11 12, on right: 1 11
sub_dec (56)
    on left: 14, on right: 11
@1 (57)
    on left: 13, on right: 14
sub_head (58)
    on left: 15 16, on right: 14
args (59)
    on left: 17 18, on right: 15 16
param_list (60)
    on left: 19 20, on right: 17 20
local_dec (61)
    on left: 21 22, on right: 14 21
comp_stmt (62)
    on left: 23, on right: 1 14 30
optional_stmts (63)
    on left: 24 25, on right: 23
stmt_list (64)
    on left: 26 27, on right: 24 27
stmt (65)
    on left: 28 29 30 31 32 33, on right: 26 27 31 32 33
variable (66)
    on left: 34 35, on right: 28
proc_stmt (67)
    on left: 36 37, on right: 29
exp_list (68)
    on left: 38 39, on right: 37 39 45
exp (69)
    on left: 40 41 42 43 44 45 46 47 48, on right: 28 31 32 33 35 38
    39 46 47 48
binOp (70)
    on left: 49 50 51 52 53 54 55 56 57 58 59 60 61,
    on right: 47


state 0

    0 $accept: . program $end

    KPROGRAM  shift, and go to state 1

    program  go to state 2


state 1

    1 program: KPROGRAM . KIDENT ';' declarations sub_declarations comp_stmt

    KIDENT  shift, and go to state 3


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: KPROGRAM KIDENT . ';' declarations sub_declarations comp_stmt

    ';'  shift, and go to state 5


state 4

    0 $accept: program $end .

    $default  accept


state 5

    1 program: KPROGRAM KIDENT ';' . declarations sub_declarations comp_stmt

    $default  reduce using rule 3 (declarations)

    declarations  go to state 6


state 6

    1 program: KPROGRAM KIDENT ';' declarations . sub_declarations comp_stmt
    2 declarations: declarations . KVAR ident_list ':' type ';'

    KVAR  shift, and go to state 7

    $default  reduce using rule 12 (sub_declarations)

    sub_declarations  go to state 8


state 7

    2 declarations: declarations KVAR . ident_list ':' type ';'

    KIDENT  shift, and go to state 9

    ident_list  go to state 10


state 8

    1 program: KPROGRAM KIDENT ';' declarations sub_declarations . comp_stmt
   11 sub_declarations: sub_declarations . sub_dec ';'

    KBEGIN  shift, and go to state 11

    $default  reduce using rule 13 (@1)

    sub_dec    go to state 12
    @1         go to state 13
    comp_stmt  go to state 14


state 9

    4 ident_list: KIDENT .

    $default  reduce using rule 4 (ident_list)


state 10

    2 declarations: declarations KVAR ident_list . ':' type ';'
    5 ident_list: ident_list . ',' KIDENT

    ':'  shift, and go to state 15
    ','  shift, and go to state 16


state 11

   23 comp_stmt: KBEGIN . optional_stmts KEND

    KWHILE  shift, and go to state 17
    KIDENT  shift, and go to state 18
    KBEGIN  shift, and go to state 11
    KIF     shift, and go to state 19

    $default  reduce using rule 25 (optional_stmts)

    comp_stmt       go to state 20
    optional_stmts  go to state 21
    stmt_list       go to state 22
    stmt            go to state 23
    variable        go to state 24
    proc_stmt       go to state 25


state 12

   11 sub_declarations: sub_declarations sub_dec . ';'

    ';'  shift, and go to state 26


state 13

   14 sub_dec: @1 . sub_head local_dec comp_stmt

    KFUNC  shift, and go to state 27
    KPROC  shift, and go to state 28

    sub_head  go to state 29


state 14

    1 program: KPROGRAM KIDENT ';' declarations sub_declarations comp_stmt .

    $default  reduce using rule 1 (program)


state 15

    2 declarations: declarations KVAR ident_list ':' . type ';'

    KINT    shift, and go to state 30
    KREAL   shift, and go to state 31
    KBOOL   shift, and go to state 32
    KARRAY  shift, and go to state 33

    type      go to state 34
    std_type  go to state 35


state 16

    5 ident_list: ident_list ',' . KIDENT

    KIDENT  shift, and go to state 36


state 17

   33 stmt: KWHILE . exp KDO stmt

    KIDENT    shift, and go to state 37
    KINTNUM   shift, and go to state 38
    KREALNUM  shift, and go to state 39
    KTRUE     shift, and go to state 40
    KFALSE    shift, and go to state 41
    KNOT      shift, and go to state 42
    '('       shift, and go to state 43

    exp  go to state 44


state 18

   34 variable: KIDENT .
   35         | KIDENT . '[' exp ']'
   36 proc_stmt: KIDENT .
   37          | KIDENT . '(' exp_list ')'

    '['  shift, and go to state 45
    '('  shift, and go to state 46

    KASSIGN   reduce using rule 34 (variable)
    $default  reduce using rule 36 (proc_stmt)


state 19

   31 stmt: KIF . exp KTHEN stmt
   32     | KIF . exp KTHEN stmt KELSE stmt

    KIDENT    shift, and go to state 37
    KINTNUM   shift, and go to state 38
    KREALNUM  shift, and go to state 39
    KTRUE     shift, and go to state 40
    KFALSE    shift, and go to state 41
    KNOT      shift, and go to state 42
    '('       shift, and go to state 43

    exp  go to state 47


state 20

   30 stmt: comp_stmt .

    $default  reduce using rule 30 (stmt)


state 21

   23 comp_stmt: KBEGIN optional_stmts . KEND

    KEND  shift, and go to state 48


state 22

   24 optional_stmts: stmt_list .
   27 stmt_list: stmt_list . ';' stmt

    ';'  shift, and go to state 49

    $default  reduce using rule 24 (optional_stmts)


state 23

   26 stmt_list: stmt .

    $default  reduce using rule 26 (stmt_list)


state 24

   28 stmt: variable . KASSIGN exp

    KASSIGN  shift, and go to state 50


state 25

   29 stmt: proc_stmt .

    $default  reduce using rule 29 (stmt)


state 26

   11 sub_declarations: sub_declarations sub_dec ';' .

    $default  reduce using rule 11 (sub_declarations)


state 27

   15 sub_head: KFUNC . KIDENT args ':' std_type ';'

    KIDENT  shift, and go to state 51


state 28

   16 sub_head: KPROC . KIDENT args ';'

    KIDENT  shift, and go to state 52


state 29

   14 sub_dec: @1 sub_head . local_dec comp_stmt

    $default  reduce using rule 22 (local_dec)

    local_dec  go to state 53


state 30

    8 std_type: KINT .

    $default  reduce using rule 8 (std_type)


state 31

    9 std_type: KREAL .

    $default  reduce using rule 9 (std_type)


state 32

   10 std_type: KBOOL .

    $default  reduce using rule 10 (std_type)


state 33

    7 type: KARRAY . '[' KINTNUM '..' KINTNUM ']' KOF std_type

    '['  shift, and go to state 54


state 34

    2 declarations: declarations KVAR ident_list ':' type . ';'

    ';'  shift, and go to state 55


state 35

    6 type: std_type .

    $default  reduce using rule 6 (type)


state 36

    5 ident_list: ident_list ',' KIDENT .

    $default  reduce using rule 5 (ident_list)


state 37

   40 exp: KIDENT .
   45    | KIDENT . '(' exp_list ')'

    '('  shift, and go to state 56

    $default  reduce using rule 40 (exp)


state 38

   41 exp: KINTNUM .

    $default  reduce using rule 41 (exp)


state 39

   42 exp: KREALNUM .

    $default  reduce using rule 42 (exp)


state 40

   43 exp: KTRUE .

    $default  reduce using rule 43 (exp)


state 41

   44 exp: KFALSE .

    $default  reduce using rule 44 (exp)


state 42

   48 exp: KNOT . exp

    KIDENT    shift, and go to state 37
    KINTNUM   shift, and go to state 38
    KREALNUM  shift, and go to state 39
    KTRUE     shift, and go to state 40
    KFALSE    shift, and go to state 41
    KNOT      shift, and go to state 42
    '('       shift, and go to state 43

    exp  go to state 57


state 43

   46 exp: '(' . exp ')'

    KIDENT    shift, and go to state 37
    KINTNUM   shift, and go to state 38
    KREALNUM  shift, and go to state 39
    KTRUE     shift, and go to state 40
    KFALSE    shift, and go to state 41
    KNOT      shift, and go to state 42
    '('       shift, and go to state 43

    exp  go to state 58


state 44

   33 stmt: KWHILE exp . KDO stmt
   47 exp: exp . binOp exp

    KDO      shift, and go to state 59
    KMOD     shift, and go to state 60
    KOR      shift, and go to state 61
    KAND     shift, and go to state 62
    KGT      shift, and go to state 63
    KLT      shift, and go to state 64
    KGE      shift, and go to state 65
    KLE      shift, and go to state 66
    KET      shift, and go to state 67
    KNE      shift, and go to state 68
    KMULT    shift, and go to state 69
    KADD     shift, and go to state 70
    KSUB     shift, and go to state 71
    KDIVIDE  shift, and go to state 72

    binOp  go to state 73


state 45

   35 variable: KIDENT '[' . exp ']'

    KIDENT    shift, and go to state 37
    KINTNUM   shift, and go to state 38
    KREALNUM  shift, and go to state 39
    KTRUE     shift, and go to state 40
    KFALSE    shift, and go to state 41
    KNOT      shift, and go to state 42
    '('       shift, and go to state 43

    exp  go to state 74


state 46

   37 proc_stmt: KIDENT '(' . exp_list ')'

    KIDENT    shift, and go to state 37
    KINTNUM   shift, and go to state 38
    KREALNUM  shift, and go to state 39
    KTRUE     shift, and go to state 40
    KFALSE    shift, and go to state 41
    KNOT      shift, and go to state 42
    '('       shift, and go to state 43

    exp_list  go to state 75
    exp       go to state 76


state 47

   31 stmt: KIF exp . KTHEN stmt
   32     | KIF exp . KTHEN stmt KELSE stmt
   47 exp: exp . binOp exp

    KTHEN    shift, and go to state 77
    KMOD     shift, and go to state 60
    KOR      shift, and go to state 61
    KAND     shift, and go to state 62
    KGT      shift, and go to state 63
    KLT      shift, and go to state 64
    KGE      shift, and go to state 65
    KLE      shift, and go to state 66
    KET      shift, and go to state 67
    KNE      shift, and go to state 68
    KMULT    shift, and go to state 69
    KADD     shift, and go to state 70
    KSUB     shift, and go to state 71
    KDIVIDE  shift, and go to state 72

    binOp  go to state 73


state 48

   23 comp_stmt: KBEGIN optional_stmts KEND .

    $default  reduce using rule 23 (comp_stmt)


state 49

   27 stmt_list: stmt_list ';' . stmt

    KWHILE  shift, and go to state 17
    KIDENT  shift, and go to state 18
    KBEGIN  shift, and go to state 11
    KIF     shift, and go to state 19

    comp_stmt  go to state 20
    stmt       go to state 78
    variable   go to state 24
    proc_stmt  go to state 25


state 50

   28 stmt: variable KASSIGN . exp

    KIDENT    shift, and go to state 37
    KINTNUM   shift, and go to state 38
    KREALNUM  shift, and go to state 39
    KTRUE     shift, and go to state 40
    KFALSE    shift, and go to state 41
    KNOT      shift, and go to state 42
    '('       shift, and go to state 43

    exp  go to state 79


state 51

   15 sub_head: KFUNC KIDENT . args ':' std_type ';'

    '('  shift, and go to state 80

    $default  reduce using rule 18 (args)

    args  go to state 81


state 52

   16 sub_head: KPROC KIDENT . args ';'

    '('  shift, and go to state 80

    $default  reduce using rule 18 (args)

    args  go to state 82


state 53

   14 sub_dec: @1 sub_head local_dec . comp_stmt
   21 local_dec: local_dec . KVAR ident_list ':' type ';'

    KVAR    shift, and go to state 83
    KBEGIN  shift, and go to state 11

    comp_stmt  go to state 84


state 54

    7 type: KARRAY '[' . KINTNUM '..' KINTNUM ']' KOF std_type

    KINTNUM  shift, and go to state 85


state 55

    2 declarations: declarations KVAR ident_list ':' type ';' .

    $default  reduce using rule 2 (declarations)


state 56

   45 exp: KIDENT '(' . exp_list ')'

    KIDENT    shift, and go to state 37
    KINTNUM   shift, and go to state 38
    KREALNUM  shift, and go to state 39
    KTRUE     shift, and go to state 40
    KFALSE    shift, and go to state 41
    KNOT      shift, and go to state 42
    '('       shift, and go to state 43

    exp_list  go to state 86
    exp       go to state 76


state 57

   47 exp: exp . binOp exp
   48    | KNOT exp .

    KMOD     shift, and go to state 60
    KGT      shift, and go to state 63
    KLT      shift, and go to state 64
    KGE      shift, and go to state 65
    KLE      shift, and go to state 66
    KET      shift, and go to state 67
    KNE      shift, and go to state 68
    KMULT    shift, and go to state 69
    KADD     shift, and go to state 70
    KSUB     shift, and go to state 71
    KDIVIDE  shift, and go to state 72

    $default  reduce using rule 48 (exp)

    binOp  go to state 73


state 58

   46 exp: '(' exp . ')'
   47    | exp . binOp exp

    KMOD     shift, and go to state 60
    KOR      shift, and go to state 61
    KAND     shift, and go to state 62
    KGT      shift, and go to state 63
    KLT      shift, and go to state 64
    KGE      shift, and go to state 65
    KLE      shift, and go to state 66
    KET      shift, and go to state 67
    KNE      shift, and go to state 68
    KMULT    shift, and go to state 69
    KADD     shift, and go to state 70
    KSUB     shift, and go to state 71
    KDIVIDE  shift, and go to state 72
    ')'      shift, and go to state 87

    binOp  go to state 73


state 59

   33 stmt: KWHILE exp KDO . stmt

    KWHILE  shift, and go to state 17
    KIDENT  shift, and go to state 18
    KBEGIN  shift, and go to state 11
    KIF     shift, and go to state 19

    comp_stmt  go to state 20
    stmt       go to state 88
    variable   go to state 24
    proc_stmt  go to state 25


state 60

   53 binOp: KMOD .

    $default  reduce using rule 53 (binOp)


state 61

   61 binOp: KOR .

    $default  reduce using rule 61 (binOp)


state 62

   60 binOp: KAND .

    $default  reduce using rule 60 (binOp)


state 63

   54 binOp: KGT .

    $default  reduce using rule 54 (binOp)


state 64

   56 binOp: KLT .

    $default  reduce using rule 56 (binOp)


state 65

   55 binOp: KGE .

    $default  reduce using rule 55 (binOp)


state 66

   57 binOp: KLE .

    $default  reduce using rule 57 (binOp)


state 67

   58 binOp: KET .

    $default  reduce using rule 58 (binOp)


state 68

   59 binOp: KNE .

    $default  reduce using rule 59 (binOp)


state 69

   51 binOp: KMULT .

    $default  reduce using rule 51 (binOp)


state 70

   49 binOp: KADD .

    $default  reduce using rule 49 (binOp)


state 71

   50 binOp: KSUB .

    $default  reduce using rule 50 (binOp)


state 72

   52 binOp: KDIVIDE .

    $default  reduce using rule 52 (binOp)


state 73

   47 exp: exp binOp . exp

    KIDENT    shift, and go to state 37
    KINTNUM   shift, and go to state 38
    KREALNUM  shift, and go to state 39
    KTRUE     shift, and go to state 40
    KFALSE    shift, and go to state 41
    KNOT      shift, and go to state 42
    '('       shift, and go to state 43

    exp  go to state 89


state 74

   35 variable: KIDENT '[' exp . ']'
   47 exp: exp . binOp exp

    KMOD     shift, and go to state 60
    KOR      shift, and go to state 61
    KAND     shift, and go to state 62
    KGT      shift, and go to state 63
    KLT      shift, and go to state 64
    KGE      shift, and go to state 65
    KLE      shift, and go to state 66
    KET      shift, and go to state 67
    KNE      shift, and go to state 68
    KMULT    shift, and go to state 69
    KADD     shift, and go to state 70
    KSUB     shift, and go to state 71
    KDIVIDE  shift, and go to state 72
    ']'      shift, and go to state 90

    binOp  go to state 73


state 75

   37 proc_stmt: KIDENT '(' exp_list . ')'
   39 exp_list: exp_list . ',' exp

    ','  shift, and go to state 91
    ')'  shift, and go to state 92


state 76

   38 exp_list: exp .
   47 exp: exp . binOp exp

    KMOD     shift, and go to state 60
    KOR      shift, and go to state 61
    KAND     shift, and go to state 62
    KGT      shift, and go to state 63
    KLT      shift, and go to state 64
    KGE      shift, and go to state 65
    KLE      shift, and go to state 66
    KET      shift, and go to state 67
    KNE      shift, and go to state 68
    KMULT    shift, and go to state 69
    KADD     shift, and go to state 70
    KSUB     shift, and go to state 71
    KDIVIDE  shift, and go to state 72

    $default  reduce using rule 38 (exp_list)

    binOp  go to state 73


state 77

   31 stmt: KIF exp KTHEN . stmt
   32     | KIF exp KTHEN . stmt KELSE stmt

    KWHILE  shift, and go to state 17
    KIDENT  shift, and go to state 18
    KBEGIN  shift, and go to state 11
    KIF     shift, and go to state 19

    comp_stmt  go to state 20
    stmt       go to state 93
    variable   go to state 24
    proc_stmt  go to state 25


state 78

   27 stmt_list: stmt_list ';' stmt .

    $default  reduce using rule 27 (stmt_list)


state 79

   28 stmt: variable KASSIGN exp .
   47 exp: exp . binOp exp

    KMOD     shift, and go to state 60
    KOR      shift, and go to state 61
    KAND     shift, and go to state 62
    KGT      shift, and go to state 63
    KLT      shift, and go to state 64
    KGE      shift, and go to state 65
    KLE      shift, and go to state 66
    KET      shift, and go to state 67
    KNE      shift, and go to state 68
    KMULT    shift, and go to state 69
    KADD     shift, and go to state 70
    KSUB     shift, and go to state 71
    KDIVIDE  shift, and go to state 72

    $default  reduce using rule 28 (stmt)

    binOp  go to state 73


state 80

   17 args: '(' . param_list ')'

    KIDENT  shift, and go to state 9

    ident_list  go to state 94
    param_list  go to state 95


state 81

   15 sub_head: KFUNC KIDENT args . ':' std_type ';'

    ':'  shift, and go to state 96


state 82

   16 sub_head: KPROC KIDENT args . ';'

    ';'  shift, and go to state 97


state 83

   21 local_dec: local_dec KVAR . ident_list ':' type ';'

    KIDENT  shift, and go to state 9

    ident_list  go to state 98


state 84

   14 sub_dec: @1 sub_head local_dec comp_stmt .

    $default  reduce using rule 14 (sub_dec)


state 85

    7 type: KARRAY '[' KINTNUM . '..' KINTNUM ']' KOF std_type

    '..'  shift, and go to state 99


state 86

   39 exp_list: exp_list . ',' exp
   45 exp: KIDENT '(' exp_list . ')'

    ','  shift, and go to state 91
    ')'  shift, and go to state 100


state 87

   46 exp: '(' exp ')' .

    $default  reduce using rule 46 (exp)


state 88

   33 stmt: KWHILE exp KDO stmt .

    $default  reduce using rule 33 (stmt)


state 89

   47 exp: exp . binOp exp
   47    | exp binOp exp .

    $default  reduce using rule 47 (exp)

    binOp  go to state 73


state 90

   35 variable: KIDENT '[' exp ']' .

    $default  reduce using rule 35 (variable)


state 91

   39 exp_list: exp_list ',' . exp

    KIDENT    shift, and go to state 37
    KINTNUM   shift, and go to state 38
    KREALNUM  shift, and go to state 39
    KTRUE     shift, and go to state 40
    KFALSE    shift, and go to state 41
    KNOT      shift, and go to state 42
    '('       shift, and go to state 43

    exp  go to state 101


state 92

   37 proc_stmt: KIDENT '(' exp_list ')' .

    $default  reduce using rule 37 (proc_stmt)


state 93

   31 stmt: KIF exp KTHEN stmt .
   32     | KIF exp KTHEN stmt . KELSE stmt

    KELSE  shift, and go to state 102

    $default  reduce using rule 31 (stmt)


state 94

    5 ident_list: ident_list . ',' KIDENT
   19 param_list: ident_list . ':' type

    ':'  shift, and go to state 103
    ','  shift, and go to state 16


state 95

   17 args: '(' param_list . ')'
   20 param_list: param_list . ';' ident_list ':' type

    ';'  shift, and go to state 104
    ')'  shift, and go to state 105


state 96

   15 sub_head: KFUNC KIDENT args ':' . std_type ';'

    KINT   shift, and go to state 30
    KREAL  shift, and go to state 31
    KBOOL  shift, and go to state 32

    std_type  go to state 106


state 97

   16 sub_head: KPROC KIDENT args ';' .

    $default  reduce using rule 16 (sub_head)


state 98

    5 ident_list: ident_list . ',' KIDENT
   21 local_dec: local_dec KVAR ident_list . ':' type ';'

    ':'  shift, and go to state 107
    ','  shift, and go to state 16


state 99

    7 type: KARRAY '[' KINTNUM '..' . KINTNUM ']' KOF std_type

    KINTNUM  shift, and go to state 108


state 100

   45 exp: KIDENT '(' exp_list ')' .

    $default  reduce using rule 45 (exp)


state 101

   39 exp_list: exp_list ',' exp .
   47 exp: exp . binOp exp

    KMOD     shift, and go to state 60
    KOR      shift, and go to state 61
    KAND     shift, and go to state 62
    KGT      shift, and go to state 63
    KLT      shift, and go to state 64
    KGE      shift, and go to state 65
    KLE      shift, and go to state 66
    KET      shift, and go to state 67
    KNE      shift, and go to state 68
    KMULT    shift, and go to state 69
    KADD     shift, and go to state 70
    KSUB     shift, and go to state 71
    KDIVIDE  shift, and go to state 72

    $default  reduce using rule 39 (exp_list)

    binOp  go to state 73


state 102

   32 stmt: KIF exp KTHEN stmt KELSE . stmt

    KWHILE  shift, and go to state 17
    KIDENT  shift, and go to state 18
    KBEGIN  shift, and go to state 11
    KIF     shift, and go to state 19

    comp_stmt  go to state 20
    stmt       go to state 109
    variable   go to state 24
    proc_stmt  go to state 25


state 103

   19 param_list: ident_list ':' . type

    KINT    shift, and go to state 30
    KREAL   shift, and go to state 31
    KBOOL   shift, and go to state 32
    KARRAY  shift, and go to state 33

    type      go to state 110
    std_type  go to state 35


state 104

   20 param_list: param_list ';' . ident_list ':' type

    KIDENT  shift, and go to state 9

    ident_list  go to state 111


state 105

   17 args: '(' param_list ')' .

    $default  reduce using rule 17 (args)


state 106

   15 sub_head: KFUNC KIDENT args ':' std_type . ';'

    ';'  shift, and go to state 112


state 107

   21 local_dec: local_dec KVAR ident_list ':' . type ';'

    KINT    shift, and go to state 30
    KREAL   shift, and go to state 31
    KBOOL   shift, and go to state 32
    KARRAY  shift, and go to state 33

    type      go to state 113
    std_type  go to state 35


state 108

    7 type: KARRAY '[' KINTNUM '..' KINTNUM . ']' KOF std_type

    ']'  shift, and go to state 114


state 109

   32 stmt: KIF exp KTHEN stmt KELSE stmt .

    $default  reduce using rule 32 (stmt)


state 110

   19 param_list: ident_list ':' type .

    $default  reduce using rule 19 (param_list)


state 111

    5 ident_list: ident_list . ',' KIDENT
   20 param_list: param_list ';' ident_list . ':' type

    ':'  shift, and go to state 115
    ','  shift, and go to state 16


state 112

   15 sub_head: KFUNC KIDENT args ':' std_type ';' .

    $default  reduce using rule 15 (sub_head)


state 113

   21 local_dec: local_dec KVAR ident_list ':' type . ';'

    ';'  shift, and go to state 116


state 114

    7 type: KARRAY '[' KINTNUM '..' KINTNUM ']' . KOF std_type

    KOF  shift, and go to state 117


state 115

   20 param_list: param_list ';' ident_list ':' . type

    KINT    shift, and go to state 30
    KREAL   shift, and go to state 31
    KBOOL   shift, and go to state 32
    KARRAY  shift, and go to state 33

    type      go to state 118
    std_type  go to state 35


state 116

   21 local_dec: local_dec KVAR ident_list ':' type ';' .

    $default  reduce using rule 21 (local_dec)


state 117

    7 type: KARRAY '[' KINTNUM '..' KINTNUM ']' KOF . std_type

    KINT   shift, and go to state 30
    KREAL  shift, and go to state 31
    KBOOL  shift, and go to state 32

    std_type  go to state 119


state 118

   20 param_list: param_list ';' ident_list ':' type .

    $default  reduce using rule 20 (param_list)


state 119

    7 type: KARRAY '[' KINTNUM '..' KINTNUM ']' KOF std_type .

    $default  reduce using rule 7 (type)
