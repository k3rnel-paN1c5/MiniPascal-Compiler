Terminals which are not used

   KREALNUM


State 79 conflicts: 13 shift/reduce
State 94 conflicts: 13 shift/reduce
State 95 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: KPROGRAM KIDENT ';' declarations sub_declarations comp_stmt

    2 declarations: declarations KVAR ident_list ':' type ';'
    3             | /* empty */

    4 ident_list: KIDENT
    5           | ident_list ',' KIDENT

    6 type: std_type
    7     | KARRAY '[' KINTNUM '..' KINTNUM ']' KOF std_type

    8 std_type: KINT
    9         | KREAL
   10         | KBOOL

   11 sub_declarations: sub_declarations sub_dec ';'
   12                 | /* empty */

   13 sub_dec: sub_head comp_stmt

   14 sub_head: KFUNC KIDENT args ':' std_type
   15         | KPROC KIDENT args ';'

   16 args: '(' param_list ')'
   17     | /* empty */

   18 param_list: ident_list ':' type
   19           | param_list ';' ident_list ':' type

   20 comp_stmt: KBEGIN optional_stmts KEND

   21 optional_stmts: stmt_list
   22               | /* empty */

   23 stmt_list: stmt
   24          | stmt_list ';' stmt

   25 stmt: variable KASSIGNE exp
   26     | proc_stmt
   27     | comp_stmt
   28     | KIF exp KTHEN stmt
   29     | KIF exp KTHEN stmt KELSE stmt
   30     | KWHILE exp KDO stmt

   31 variable: KIDENT
   32         | KIDENT '[' exp ']'

   33 proc_stmt: KIDENT
   34          | KIDENT '(' exp_list ')'

   35 exp_list: exp
   36         | exp_list ',' exp

   37 exp: KIDENT
   38    | KINTNUM
   39    | KTRUE
   40    | KFALSE
   41    | KIDENT '(' exp_list ')'
   42    | '(' exp ')'
   43    | exp binOp exp
   44    | uniOp exp
   45    | /* empty */

   46 binOp: KADD
   47      | KSUB
   48      | KMULT
   49      | KDIVIDE
   50      | KMOD
   51      | KGT
   52      | KGE
   53      | KLT
   54      | KLE
   55      | KNE
   56      | KET
   57      | KAND
   58      | KOR

   59 uniOp: KNOT


Terminals, with rules where they appear

$end (0) 0
'(' (40) 16 34 41 42
')' (41) 16 34 41 42
',' (44) 5 36
'..' (46) 7
':' (58) 2 14 18 19
';' (59) 1 2 11 15 19 24
'[' (91) 7 32
']' (93) 7 32
error (256)
KPROGRAM (258) 1
KVAR (259) 2
KINT (260) 8
KREAL (261) 9
KBOOL (262) 10
KFUNC (263) 14
KPROC (264) 15
KWHILE (265) 30
KDO (266) 30
KBEGIN (267) 20
KEND (268) 20
KIF (269) 28 29
KTHEN (270) 28 29
KELSE (271) 29
KARRAY (272) 7
KOF (273) 7
KMOD (274) 50
KNOT (275) 59
KOR (276) 58
KAND (277) 57
KASSIGNE (278) 25
KIDENT (279) 1 4 5 14 15 31 32 33 34 37 41
KINTNUM (280) 7 38
KREALNUM (281)
KTRUE (282) 39
KFALSE (283) 40
KGT (284) 51
KLT (285) 53
KGE (286) 52
KLE (287) 54
KET (288) 56
KNE (289) 55
KMULT (290) 48
KADD (291) 46
KSUB (292) 47
KDIVIDE (293) 49


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
declarations (49)
    on left: 2 3, on right: 1 2
ident_list (50)
    on left: 4 5, on right: 2 5 18 19
type (51)
    on left: 6 7, on right: 2 18 19
std_type (52)
    on left: 8 9 10, on right: 6 7 14
sub_declarations (53)
    on left: 11 12, on right: 1 11
sub_dec (54)
    on left: 13, on right: 11
sub_head (55)
    on left: 14 15, on right: 13
args (56)
    on left: 16 17, on right: 14 15
param_list (57)
    on left: 18 19, on right: 16 19
comp_stmt (58)
    on left: 20, on right: 1 13 27
optional_stmts (59)
    on left: 21 22, on right: 20
stmt_list (60)
    on left: 23 24, on right: 21 24
stmt (61)
    on left: 25 26 27 28 29 30, on right: 23 24 28 29 30
variable (62)
    on left: 31 32, on right: 25
proc_stmt (63)
    on left: 33 34, on right: 26
exp_list (64)
    on left: 35 36, on right: 34 36 41
exp (65)
    on left: 37 38 39 40 41 42 43 44 45, on right: 25 28 29 30 32 35
    36 42 43 44
binOp (66)
    on left: 46 47 48 49 50 51 52 53 54 55 56 57 58,
    on right: 43
uniOp (67)
    on left: 59, on right: 44


state 0

    0 $accept: . program $end

    KPROGRAM  shift, and go to state 1

    program  go to state 2


state 1

    1 program: KPROGRAM . KIDENT ';' declarations sub_declarations comp_stmt

    KIDENT  shift, and go to state 3


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: KPROGRAM KIDENT . ';' declarations sub_declarations comp_stmt

    ';'  shift, and go to state 5


state 4

    0 $accept: program $end .

    $default  accept


state 5

    1 program: KPROGRAM KIDENT ';' . declarations sub_declarations comp_stmt

    $default  reduce using rule 3 (declarations)

    declarations  go to state 6


state 6

    1 program: KPROGRAM KIDENT ';' declarations . sub_declarations comp_stmt
    2 declarations: declarations . KVAR ident_list ':' type ';'

    KVAR  shift, and go to state 7

    $default  reduce using rule 12 (sub_declarations)

    sub_declarations  go to state 8


state 7

    2 declarations: declarations KVAR . ident_list ':' type ';'

    KIDENT  shift, and go to state 9

    ident_list  go to state 10


state 8

    1 program: KPROGRAM KIDENT ';' declarations sub_declarations . comp_stmt
   11 sub_declarations: sub_declarations . sub_dec ';'

    KFUNC   shift, and go to state 11
    KPROC   shift, and go to state 12
    KBEGIN  shift, and go to state 13

    sub_dec    go to state 14
    sub_head   go to state 15
    comp_stmt  go to state 16


state 9

    4 ident_list: KIDENT .

    $default  reduce using rule 4 (ident_list)


state 10

    2 declarations: declarations KVAR ident_list . ':' type ';'
    5 ident_list: ident_list . ',' KIDENT

    ':'  shift, and go to state 17
    ','  shift, and go to state 18


state 11

   14 sub_head: KFUNC . KIDENT args ':' std_type

    KIDENT  shift, and go to state 19


state 12

   15 sub_head: KPROC . KIDENT args ';'

    KIDENT  shift, and go to state 20


state 13

   20 comp_stmt: KBEGIN . optional_stmts KEND

    KWHILE  shift, and go to state 21
    KBEGIN  shift, and go to state 13
    KIF     shift, and go to state 22
    KIDENT  shift, and go to state 23

    $default  reduce using rule 22 (optional_stmts)

    comp_stmt       go to state 24
    optional_stmts  go to state 25
    stmt_list       go to state 26
    stmt            go to state 27
    variable        go to state 28
    proc_stmt       go to state 29


state 14

   11 sub_declarations: sub_declarations sub_dec . ';'

    ';'  shift, and go to state 30


state 15

   13 sub_dec: sub_head . comp_stmt

    KBEGIN  shift, and go to state 13

    comp_stmt  go to state 31


state 16

    1 program: KPROGRAM KIDENT ';' declarations sub_declarations comp_stmt .

    $default  reduce using rule 1 (program)


state 17

    2 declarations: declarations KVAR ident_list ':' . type ';'

    KINT    shift, and go to state 32
    KREAL   shift, and go to state 33
    KBOOL   shift, and go to state 34
    KARRAY  shift, and go to state 35

    type      go to state 36
    std_type  go to state 37


state 18

    5 ident_list: ident_list ',' . KIDENT

    KIDENT  shift, and go to state 38


state 19

   14 sub_head: KFUNC KIDENT . args ':' std_type

    '('  shift, and go to state 39

    $default  reduce using rule 17 (args)

    args  go to state 40


state 20

   15 sub_head: KPROC KIDENT . args ';'

    '('  shift, and go to state 39

    $default  reduce using rule 17 (args)

    args  go to state 41


state 21

   30 stmt: KWHILE . exp KDO stmt

    KNOT     shift, and go to state 42
    KIDENT   shift, and go to state 43
    KINTNUM  shift, and go to state 44
    KTRUE    shift, and go to state 45
    KFALSE   shift, and go to state 46
    '('      shift, and go to state 47

    $default  reduce using rule 45 (exp)

    exp    go to state 48
    uniOp  go to state 49


state 22

   28 stmt: KIF . exp KTHEN stmt
   29     | KIF . exp KTHEN stmt KELSE stmt

    KNOT     shift, and go to state 42
    KIDENT   shift, and go to state 43
    KINTNUM  shift, and go to state 44
    KTRUE    shift, and go to state 45
    KFALSE   shift, and go to state 46
    '('      shift, and go to state 47

    $default  reduce using rule 45 (exp)

    exp    go to state 50
    uniOp  go to state 49


state 23

   31 variable: KIDENT .
   32         | KIDENT . '[' exp ']'
   33 proc_stmt: KIDENT .
   34          | KIDENT . '(' exp_list ')'

    '['  shift, and go to state 51
    '('  shift, and go to state 52

    KASSIGNE  reduce using rule 31 (variable)
    $default  reduce using rule 33 (proc_stmt)


state 24

   27 stmt: comp_stmt .

    $default  reduce using rule 27 (stmt)


state 25

   20 comp_stmt: KBEGIN optional_stmts . KEND

    KEND  shift, and go to state 53


state 26

   21 optional_stmts: stmt_list .
   24 stmt_list: stmt_list . ';' stmt

    ';'  shift, and go to state 54

    $default  reduce using rule 21 (optional_stmts)


state 27

   23 stmt_list: stmt .

    $default  reduce using rule 23 (stmt_list)


state 28

   25 stmt: variable . KASSIGNE exp

    KASSIGNE  shift, and go to state 55


state 29

   26 stmt: proc_stmt .

    $default  reduce using rule 26 (stmt)


state 30

   11 sub_declarations: sub_declarations sub_dec ';' .

    $default  reduce using rule 11 (sub_declarations)


state 31

   13 sub_dec: sub_head comp_stmt .

    $default  reduce using rule 13 (sub_dec)


state 32

    8 std_type: KINT .

    $default  reduce using rule 8 (std_type)


state 33

    9 std_type: KREAL .

    $default  reduce using rule 9 (std_type)


state 34

   10 std_type: KBOOL .

    $default  reduce using rule 10 (std_type)


state 35

    7 type: KARRAY . '[' KINTNUM '..' KINTNUM ']' KOF std_type

    '['  shift, and go to state 56


state 36

    2 declarations: declarations KVAR ident_list ':' type . ';'

    ';'  shift, and go to state 57


state 37

    6 type: std_type .

    $default  reduce using rule 6 (type)


state 38

    5 ident_list: ident_list ',' KIDENT .

    $default  reduce using rule 5 (ident_list)


state 39

   16 args: '(' . param_list ')'

    KIDENT  shift, and go to state 9

    ident_list  go to state 58
    param_list  go to state 59


state 40

   14 sub_head: KFUNC KIDENT args . ':' std_type

    ':'  shift, and go to state 60


state 41

   15 sub_head: KPROC KIDENT args . ';'

    ';'  shift, and go to state 61


state 42

   59 uniOp: KNOT .

    $default  reduce using rule 59 (uniOp)


state 43

   37 exp: KIDENT .
   41    | KIDENT . '(' exp_list ')'

    '('  shift, and go to state 62

    $default  reduce using rule 37 (exp)


state 44

   38 exp: KINTNUM .

    $default  reduce using rule 38 (exp)


state 45

   39 exp: KTRUE .

    $default  reduce using rule 39 (exp)


state 46

   40 exp: KFALSE .

    $default  reduce using rule 40 (exp)


state 47

   42 exp: '(' . exp ')'

    KNOT     shift, and go to state 42
    KIDENT   shift, and go to state 43
    KINTNUM  shift, and go to state 44
    KTRUE    shift, and go to state 45
    KFALSE   shift, and go to state 46
    '('      shift, and go to state 47

    $default  reduce using rule 45 (exp)

    exp    go to state 63
    uniOp  go to state 49


state 48

   30 stmt: KWHILE exp . KDO stmt
   43 exp: exp . binOp exp

    KDO      shift, and go to state 64
    KMOD     shift, and go to state 65
    KOR      shift, and go to state 66
    KAND     shift, and go to state 67
    KGT      shift, and go to state 68
    KLT      shift, and go to state 69
    KGE      shift, and go to state 70
    KLE      shift, and go to state 71
    KET      shift, and go to state 72
    KNE      shift, and go to state 73
    KMULT    shift, and go to state 74
    KADD     shift, and go to state 75
    KSUB     shift, and go to state 76
    KDIVIDE  shift, and go to state 77

    binOp  go to state 78


state 49

   44 exp: uniOp . exp

    KNOT     shift, and go to state 42
    KIDENT   shift, and go to state 43
    KINTNUM  shift, and go to state 44
    KTRUE    shift, and go to state 45
    KFALSE   shift, and go to state 46
    '('      shift, and go to state 47

    $default  reduce using rule 45 (exp)

    exp    go to state 79
    uniOp  go to state 49


state 50

   28 stmt: KIF exp . KTHEN stmt
   29     | KIF exp . KTHEN stmt KELSE stmt
   43 exp: exp . binOp exp

    KTHEN    shift, and go to state 80
    KMOD     shift, and go to state 65
    KOR      shift, and go to state 66
    KAND     shift, and go to state 67
    KGT      shift, and go to state 68
    KLT      shift, and go to state 69
    KGE      shift, and go to state 70
    KLE      shift, and go to state 71
    KET      shift, and go to state 72
    KNE      shift, and go to state 73
    KMULT    shift, and go to state 74
    KADD     shift, and go to state 75
    KSUB     shift, and go to state 76
    KDIVIDE  shift, and go to state 77

    binOp  go to state 78


state 51

   32 variable: KIDENT '[' . exp ']'

    KNOT     shift, and go to state 42
    KIDENT   shift, and go to state 43
    KINTNUM  shift, and go to state 44
    KTRUE    shift, and go to state 45
    KFALSE   shift, and go to state 46
    '('      shift, and go to state 47

    $default  reduce using rule 45 (exp)

    exp    go to state 81
    uniOp  go to state 49


state 52

   34 proc_stmt: KIDENT '(' . exp_list ')'

    KNOT     shift, and go to state 42
    KIDENT   shift, and go to state 43
    KINTNUM  shift, and go to state 44
    KTRUE    shift, and go to state 45
    KFALSE   shift, and go to state 46
    '('      shift, and go to state 47

    $default  reduce using rule 45 (exp)

    exp_list  go to state 82
    exp       go to state 83
    uniOp     go to state 49


state 53

   20 comp_stmt: KBEGIN optional_stmts KEND .

    $default  reduce using rule 20 (comp_stmt)


state 54

   24 stmt_list: stmt_list ';' . stmt

    KWHILE  shift, and go to state 21
    KBEGIN  shift, and go to state 13
    KIF     shift, and go to state 22
    KIDENT  shift, and go to state 23

    comp_stmt  go to state 24
    stmt       go to state 84
    variable   go to state 28
    proc_stmt  go to state 29


state 55

   25 stmt: variable KASSIGNE . exp

    KNOT     shift, and go to state 42
    KIDENT   shift, and go to state 43
    KINTNUM  shift, and go to state 44
    KTRUE    shift, and go to state 45
    KFALSE   shift, and go to state 46
    '('      shift, and go to state 47

    $default  reduce using rule 45 (exp)

    exp    go to state 85
    uniOp  go to state 49


state 56

    7 type: KARRAY '[' . KINTNUM '..' KINTNUM ']' KOF std_type

    KINTNUM  shift, and go to state 86


state 57

    2 declarations: declarations KVAR ident_list ':' type ';' .

    $default  reduce using rule 2 (declarations)


state 58

    5 ident_list: ident_list . ',' KIDENT
   18 param_list: ident_list . ':' type

    ':'  shift, and go to state 87
    ','  shift, and go to state 18


state 59

   16 args: '(' param_list . ')'
   19 param_list: param_list . ';' ident_list ':' type

    ';'  shift, and go to state 88
    ')'  shift, and go to state 89


state 60

   14 sub_head: KFUNC KIDENT args ':' . std_type

    KINT   shift, and go to state 32
    KREAL  shift, and go to state 33
    KBOOL  shift, and go to state 34

    std_type  go to state 90


state 61

   15 sub_head: KPROC KIDENT args ';' .

    $default  reduce using rule 15 (sub_head)


state 62

   41 exp: KIDENT '(' . exp_list ')'

    KNOT     shift, and go to state 42
    KIDENT   shift, and go to state 43
    KINTNUM  shift, and go to state 44
    KTRUE    shift, and go to state 45
    KFALSE   shift, and go to state 46
    '('      shift, and go to state 47

    $default  reduce using rule 45 (exp)

    exp_list  go to state 91
    exp       go to state 83
    uniOp     go to state 49


state 63

   42 exp: '(' exp . ')'
   43    | exp . binOp exp

    KMOD     shift, and go to state 65
    KOR      shift, and go to state 66
    KAND     shift, and go to state 67
    KGT      shift, and go to state 68
    KLT      shift, and go to state 69
    KGE      shift, and go to state 70
    KLE      shift, and go to state 71
    KET      shift, and go to state 72
    KNE      shift, and go to state 73
    KMULT    shift, and go to state 74
    KADD     shift, and go to state 75
    KSUB     shift, and go to state 76
    KDIVIDE  shift, and go to state 77
    ')'      shift, and go to state 92

    binOp  go to state 78


state 64

   30 stmt: KWHILE exp KDO . stmt

    KWHILE  shift, and go to state 21
    KBEGIN  shift, and go to state 13
    KIF     shift, and go to state 22
    KIDENT  shift, and go to state 23

    comp_stmt  go to state 24
    stmt       go to state 93
    variable   go to state 28
    proc_stmt  go to state 29


state 65

   50 binOp: KMOD .

    $default  reduce using rule 50 (binOp)


state 66

   58 binOp: KOR .

    $default  reduce using rule 58 (binOp)


state 67

   57 binOp: KAND .

    $default  reduce using rule 57 (binOp)


state 68

   51 binOp: KGT .

    $default  reduce using rule 51 (binOp)


state 69

   53 binOp: KLT .

    $default  reduce using rule 53 (binOp)


state 70

   52 binOp: KGE .

    $default  reduce using rule 52 (binOp)


state 71

   54 binOp: KLE .

    $default  reduce using rule 54 (binOp)


state 72

   56 binOp: KET .

    $default  reduce using rule 56 (binOp)


state 73

   55 binOp: KNE .

    $default  reduce using rule 55 (binOp)


state 74

   48 binOp: KMULT .

    $default  reduce using rule 48 (binOp)


state 75

   46 binOp: KADD .

    $default  reduce using rule 46 (binOp)


state 76

   47 binOp: KSUB .

    $default  reduce using rule 47 (binOp)


state 77

   49 binOp: KDIVIDE .

    $default  reduce using rule 49 (binOp)


state 78

   43 exp: exp binOp . exp

    KNOT     shift, and go to state 42
    KIDENT   shift, and go to state 43
    KINTNUM  shift, and go to state 44
    KTRUE    shift, and go to state 45
    KFALSE   shift, and go to state 46
    '('      shift, and go to state 47

    $default  reduce using rule 45 (exp)

    exp    go to state 94
    uniOp  go to state 49


state 79

   43 exp: exp . binOp exp
   44    | uniOp exp .

    KMOD     shift, and go to state 65
    KOR      shift, and go to state 66
    KAND     shift, and go to state 67
    KGT      shift, and go to state 68
    KLT      shift, and go to state 69
    KGE      shift, and go to state 70
    KLE      shift, and go to state 71
    KET      shift, and go to state 72
    KNE      shift, and go to state 73
    KMULT    shift, and go to state 74
    KADD     shift, and go to state 75
    KSUB     shift, and go to state 76
    KDIVIDE  shift, and go to state 77

    KMOD      [reduce using rule 44 (exp)]
    KOR       [reduce using rule 44 (exp)]
    KAND      [reduce using rule 44 (exp)]
    KGT       [reduce using rule 44 (exp)]
    KLT       [reduce using rule 44 (exp)]
    KGE       [reduce using rule 44 (exp)]
    KLE       [reduce using rule 44 (exp)]
    KET       [reduce using rule 44 (exp)]
    KNE       [reduce using rule 44 (exp)]
    KMULT     [reduce using rule 44 (exp)]
    KADD      [reduce using rule 44 (exp)]
    KSUB      [reduce using rule 44 (exp)]
    KDIVIDE   [reduce using rule 44 (exp)]
    $default  reduce using rule 44 (exp)

    binOp  go to state 78


state 80

   28 stmt: KIF exp KTHEN . stmt
   29     | KIF exp KTHEN . stmt KELSE stmt

    KWHILE  shift, and go to state 21
    KBEGIN  shift, and go to state 13
    KIF     shift, and go to state 22
    KIDENT  shift, and go to state 23

    comp_stmt  go to state 24
    stmt       go to state 95
    variable   go to state 28
    proc_stmt  go to state 29


state 81

   32 variable: KIDENT '[' exp . ']'
   43 exp: exp . binOp exp

    KMOD     shift, and go to state 65
    KOR      shift, and go to state 66
    KAND     shift, and go to state 67
    KGT      shift, and go to state 68
    KLT      shift, and go to state 69
    KGE      shift, and go to state 70
    KLE      shift, and go to state 71
    KET      shift, and go to state 72
    KNE      shift, and go to state 73
    KMULT    shift, and go to state 74
    KADD     shift, and go to state 75
    KSUB     shift, and go to state 76
    KDIVIDE  shift, and go to state 77
    ']'      shift, and go to state 96

    binOp  go to state 78


state 82

   34 proc_stmt: KIDENT '(' exp_list . ')'
   36 exp_list: exp_list . ',' exp

    ','  shift, and go to state 97
    ')'  shift, and go to state 98


state 83

   35 exp_list: exp .
   43 exp: exp . binOp exp

    KMOD     shift, and go to state 65
    KOR      shift, and go to state 66
    KAND     shift, and go to state 67
    KGT      shift, and go to state 68
    KLT      shift, and go to state 69
    KGE      shift, and go to state 70
    KLE      shift, and go to state 71
    KET      shift, and go to state 72
    KNE      shift, and go to state 73
    KMULT    shift, and go to state 74
    KADD     shift, and go to state 75
    KSUB     shift, and go to state 76
    KDIVIDE  shift, and go to state 77

    $default  reduce using rule 35 (exp_list)

    binOp  go to state 78


state 84

   24 stmt_list: stmt_list ';' stmt .

    $default  reduce using rule 24 (stmt_list)


state 85

   25 stmt: variable KASSIGNE exp .
   43 exp: exp . binOp exp

    KMOD     shift, and go to state 65
    KOR      shift, and go to state 66
    KAND     shift, and go to state 67
    KGT      shift, and go to state 68
    KLT      shift, and go to state 69
    KGE      shift, and go to state 70
    KLE      shift, and go to state 71
    KET      shift, and go to state 72
    KNE      shift, and go to state 73
    KMULT    shift, and go to state 74
    KADD     shift, and go to state 75
    KSUB     shift, and go to state 76
    KDIVIDE  shift, and go to state 77

    $default  reduce using rule 25 (stmt)

    binOp  go to state 78


state 86

    7 type: KARRAY '[' KINTNUM . '..' KINTNUM ']' KOF std_type

    '..'  shift, and go to state 99


state 87

   18 param_list: ident_list ':' . type

    KINT    shift, and go to state 32
    KREAL   shift, and go to state 33
    KBOOL   shift, and go to state 34
    KARRAY  shift, and go to state 35

    type      go to state 100
    std_type  go to state 37


state 88

   19 param_list: param_list ';' . ident_list ':' type

    KIDENT  shift, and go to state 9

    ident_list  go to state 101


state 89

   16 args: '(' param_list ')' .

    $default  reduce using rule 16 (args)


state 90

   14 sub_head: KFUNC KIDENT args ':' std_type .

    $default  reduce using rule 14 (sub_head)


state 91

   36 exp_list: exp_list . ',' exp
   41 exp: KIDENT '(' exp_list . ')'

    ','  shift, and go to state 97
    ')'  shift, and go to state 102


state 92

   42 exp: '(' exp ')' .

    $default  reduce using rule 42 (exp)


state 93

   30 stmt: KWHILE exp KDO stmt .

    $default  reduce using rule 30 (stmt)


state 94

   43 exp: exp . binOp exp
   43    | exp binOp exp .

    KMOD     shift, and go to state 65
    KOR      shift, and go to state 66
    KAND     shift, and go to state 67
    KGT      shift, and go to state 68
    KLT      shift, and go to state 69
    KGE      shift, and go to state 70
    KLE      shift, and go to state 71
    KET      shift, and go to state 72
    KNE      shift, and go to state 73
    KMULT    shift, and go to state 74
    KADD     shift, and go to state 75
    KSUB     shift, and go to state 76
    KDIVIDE  shift, and go to state 77

    KMOD      [reduce using rule 43 (exp)]
    KOR       [reduce using rule 43 (exp)]
    KAND      [reduce using rule 43 (exp)]
    KGT       [reduce using rule 43 (exp)]
    KLT       [reduce using rule 43 (exp)]
    KGE       [reduce using rule 43 (exp)]
    KLE       [reduce using rule 43 (exp)]
    KET       [reduce using rule 43 (exp)]
    KNE       [reduce using rule 43 (exp)]
    KMULT     [reduce using rule 43 (exp)]
    KADD      [reduce using rule 43 (exp)]
    KSUB      [reduce using rule 43 (exp)]
    KDIVIDE   [reduce using rule 43 (exp)]
    $default  reduce using rule 43 (exp)

    binOp  go to state 78


state 95

   28 stmt: KIF exp KTHEN stmt .
   29     | KIF exp KTHEN stmt . KELSE stmt

    KELSE  shift, and go to state 103

    KELSE     [reduce using rule 28 (stmt)]
    $default  reduce using rule 28 (stmt)


state 96

   32 variable: KIDENT '[' exp ']' .

    $default  reduce using rule 32 (variable)


state 97

   36 exp_list: exp_list ',' . exp

    KNOT     shift, and go to state 42
    KIDENT   shift, and go to state 43
    KINTNUM  shift, and go to state 44
    KTRUE    shift, and go to state 45
    KFALSE   shift, and go to state 46
    '('      shift, and go to state 47

    $default  reduce using rule 45 (exp)

    exp    go to state 104
    uniOp  go to state 49


state 98

   34 proc_stmt: KIDENT '(' exp_list ')' .

    $default  reduce using rule 34 (proc_stmt)


state 99

    7 type: KARRAY '[' KINTNUM '..' . KINTNUM ']' KOF std_type

    KINTNUM  shift, and go to state 105


state 100

   18 param_list: ident_list ':' type .

    $default  reduce using rule 18 (param_list)


state 101

    5 ident_list: ident_list . ',' KIDENT
   19 param_list: param_list ';' ident_list . ':' type

    ':'  shift, and go to state 106
    ','  shift, and go to state 18


state 102

   41 exp: KIDENT '(' exp_list ')' .

    $default  reduce using rule 41 (exp)


state 103

   29 stmt: KIF exp KTHEN stmt KELSE . stmt

    KWHILE  shift, and go to state 21
    KBEGIN  shift, and go to state 13
    KIF     shift, and go to state 22
    KIDENT  shift, and go to state 23

    comp_stmt  go to state 24
    stmt       go to state 107
    variable   go to state 28
    proc_stmt  go to state 29


state 104

   36 exp_list: exp_list ',' exp .
   43 exp: exp . binOp exp

    KMOD     shift, and go to state 65
    KOR      shift, and go to state 66
    KAND     shift, and go to state 67
    KGT      shift, and go to state 68
    KLT      shift, and go to state 69
    KGE      shift, and go to state 70
    KLE      shift, and go to state 71
    KET      shift, and go to state 72
    KNE      shift, and go to state 73
    KMULT    shift, and go to state 74
    KADD     shift, and go to state 75
    KSUB     shift, and go to state 76
    KDIVIDE  shift, and go to state 77

    $default  reduce using rule 36 (exp_list)

    binOp  go to state 78


state 105

    7 type: KARRAY '[' KINTNUM '..' KINTNUM . ']' KOF std_type

    ']'  shift, and go to state 108


state 106

   19 param_list: param_list ';' ident_list ':' . type

    KINT    shift, and go to state 32
    KREAL   shift, and go to state 33
    KBOOL   shift, and go to state 34
    KARRAY  shift, and go to state 35

    type      go to state 109
    std_type  go to state 37


state 107

   29 stmt: KIF exp KTHEN stmt KELSE stmt .

    $default  reduce using rule 29 (stmt)


state 108

    7 type: KARRAY '[' KINTNUM '..' KINTNUM ']' . KOF std_type

    KOF  shift, and go to state 110


state 109

   19 param_list: param_list ';' ident_list ':' type .

    $default  reduce using rule 19 (param_list)


state 110

    7 type: KARRAY '[' KINTNUM '..' KINTNUM ']' KOF . std_type

    KINT   shift, and go to state 32
    KREAL  shift, and go to state 33
    KBOOL  shift, and go to state 34

    std_type  go to state 111


state 111

    7 type: KARRAY '[' KINTNUM '..' KINTNUM ']' KOF std_type .

    $default  reduce using rule 7 (type)
